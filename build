#!/usr/bin/python3


import os
import subprocess
import shutil
import re
import sys

gamedir = 'gravityReversal'
enginedir = 'godotengine'
enginepath = 'godotengine/bin/godot.x11.opt.tools.64'



def runCmd(args, directory='.'):
    subprocess.run(args, cwd=directory, check=True)


def buildEngine():
    runCmd(['scons', '-j', '8', 'platform=x11', 'target=release_debug'], directory=enginedir)

def buildAPK(cfg, name, code, apk32_path, apk64_path):
    print('building version: cfg: {}, code: {}, name: {} --> {}, {}'.format(cfg, code, name, apk32_path, apk64_path))


    # write export_presets.cfg
    with open('export_presets.cfg.pytemplate', 'r') as template, \
        open( gamedir + '/export_presets.cfg', 'w') as cfgfile:
        cfgfile.write(''.join(template.readlines()).format(name=name, code=code, enableArm32='true', enableArm64='false'))

    # actual build
    runCmd([enginepath, '--debug', '--editor', gamedir + '/project.godot', '--export', cfg, 'tmp32.apk'])
    # this move worksaround a godot bug with certain output paths
    shutil.move(gamedir + '/tmp32.apk', apk32_path)


    
    # write export_presets.cfg
    with open('export_presets.cfg.pytemplate', 'r') as template, \
        open( gamedir + '/export_presets.cfg', 'w') as cfgfile:
        cfgfile.write(''.join(template.readlines()).format(name=name, code=code, enableArm32='false', enableArm64='true'))

    # actual build
    runCmd([enginepath, '--debug', '--editor', gamedir + '/project.godot', '--export', cfg, 'tmp64.apk'])
    # this move worksaround a godot bug with certain output paths
    shutil.move(gamedir + '/tmp64.apk', apk64_path)


    


if __name__ == '__main__':
    if  len(sys.argv) != 5:
        print('usage: {} <name> <code> <apk path> <apk64_path>'.format(sys.argv[0]))
        sys.exit(1)
    buildEngine()
    buildAPK('Android', *sys.argv[1:])